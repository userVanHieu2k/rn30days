apply plugin: "com.android.application"
apply plugin: "org.jetbrains.kotlin.android"
apply plugin: "com.facebook.react"
apply plugin: 'com.google.gms.google-services'

// Cấu hình file .env theo productFlavor
project.ext.envConfigFiles = [
    development: ".env.dev",
    staging: ".env",
    product: ".env.prod",
]

project.ext.react = [
    enableHermes: false
]

def enableProguardInReleaseBuilds = false
def jscFlavor = 'org.webkit:android-jsc:+'

android {
    ndkVersion rootProject.ext.ndkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion
    compileSdk rootProject.ext.compileSdkVersion

    namespace "com.rn30days"

    defaultConfig {
        applicationId "com.rn30days"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 1
        versionName "1.0"
        resValue "string", "build_config_package", "com.rn30days"
    }

    signingConfigs {
        debug {
            storeFile file('debug.keystore')
            storePassword 'android'
            keyAlias 'androiddebugkey'
            keyPassword 'android'
        }
        development {
            storeFile file(DEBUG_STORE_FILE)
            storePassword DEBUG_STORE_PASSWORD
            keyAlias DEBUG_KEY_ALIAS
            keyPassword DEBUG_KEY_PASSWORD
        }
        staging {
            storeFile file(STAGING_STORE_FILE)
            storePassword STAGING_STORE_PASSWORD
            keyAlias STAGING_KEY_ALIAS
            keyPassword STAGING_KEY_PASSWORD
        }
        product {
            storeFile file(PRODUCT_STORE_FILE)
            storePassword PRODUCT_STORE_PASSWORD
            keyAlias PRODUCT_KEY_ALIAS
            keyPassword PRODUCT_KEY_PASSWORD
        }
    }

    // CHỈ NÊN CÓ debug và release
    buildTypes {
        debug {
            signingConfig signingConfigs.debug
        }
        release {
            signingConfig signingConfigs.product
            minifyEnabled enableProguardInReleaseBuilds
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
        }
    }

    // TẠO CÁC FLAVOR môi trường
    flavorDimensions "env"
    productFlavors {
        development {
            dimension "env"
            applicationId "com.rn30days"
            versionNameSuffix "-dev"
            signingConfig signingConfigs.development
            resValue "string", "app_name", "MyApp Dev"
        }
        staging {
            dimension "env"
            applicationId "com.rn30days"
            versionNameSuffix "-stg"
            signingConfig signingConfigs.staging
            resValue "string", "app_name", "MyApp stg"
        }
        product {
            dimension "env"
            applicationId "com.rn30days.prod"
            signingConfig signingConfigs.product
            resValue "string", "app_name", "MyApp prod"
        }
    }
}

dependencies {
    implementation("com.facebook.react:react-android")
    implementation project(':react-native-config')

    if (hermesEnabled.toBoolean()) {
        implementation("com.facebook.react:hermes-android")
    } else {
        implementation jscFlavor
    }
}

apply from: file("../../node_modules/@react-native-community/cli-platform-android/native_modules.gradle"); applyNativeModulesAppBuildGradle(project)
apply from: file("../../node_modules/react-native-vector-icons/fonts.gradle")
apply from: project(':react-native-config').projectDir.getPath() + "/dotenv.gradle"
